
--------------- Source Node '1/2' ---------------
Node ID: 'edbdd3aa-7931-4cfd-b625-79ee0605efe9'
Similarity: '0.27645346026289574'
Metadata String:
`page_label: 14
file_name: High resolution measurement.pdf
file_path: bcorag/test_papers/High resolution measurement.pdf
file_type: application/pdf
file_size: 1391462
creation_date: 2024-06-23
last_modified_date: 2024-06-23`
Metadata Size: `222`
Content Size: `3489`
Retrieved Text:
Assignment of DUF1220 domains to appropriate clade
As previously described, the majority of DUF1220 do-
mains can be divided into 6 clades [10]. The domains of
each clade can be distinguished by their position within
the gene, their exon lengths (Additional file 5), and pro-
tein sequence motifs unique to each clade (Additional file
6). We assigned each DUF1220 domain to a clade based
on the presence or absence of these characteristic protein
sequence motifs. The validity of our clade assignments
can be confirmed by viewing a phylogenetic tree of the
protein sequences (Fig. 1). Furthermore, because the
amino-acid motifs particular to each clade are highly
conserved within clades, it is easy to view the distinctions
between clades by viewing the aligned protein sequences
(Additional file 6).
Some (16/302) DUF1220 domains do not fit well
within the previously established clades, but clearly
form 5 distinct clusters based on sequence similarity.
We have therefore established five new clades referred
to as CON4 –8 (Additional file 5). In contrast to the
domains belonging to the six clades described above,
the majority of these DUF1220 domains are located be-
tween 1p11.2 and 1p13.3. These were not analyzed in
this study because of their non-canonical nature and
their locations predominately within non- NBPF genes.
A few (6/302) DUF1220 domains appear to be hybrid
domains, that is, they contain a short exon characteris-
tic of one domain and the long exon characteristic of a
different domain. These domains were not included in
our analysis.
Individual DUF1220 domains are referred to by their
gene name, the name of the clade to which the domain
belongs, and a number reflecting the placement of that
domain within the gene. For example, NBPF1_CON1_3
refers to the third CON1 domain within NBPF1 and
NBPF20_HLS1_8 refers to the eighth HLS1 domain
within NBPF20 . Six DUF1220 containing genes currently
lack formal gene names in either RefSeq or Ensembl but
each of these has high sequence similarity to another
gene (e.g. LOC102724250 is very similar to NBPF1 ). For
clarity, in Additional file 5 and Additional file 2: Figure S1,
we refer to these genes by descriptive names reflecting
their similarity to named genes (LOC102724250: NBPF1L,
LOC100996724: PDE4DIPL1 , RP11-744H18.1: PDE4-
DIPL2 ). The three genes containing CON8 domains are
similar to one another but not to any currently named
gene, so they are referred to as CON8 containing 1, 2, and
3 (LOC105369199: CON8C1, LOC105369140: CON8C2 ,
LINC00869: CON8C3 ). In Additional file 5 we also label
some exons as conserved exon 1 –7 (CE1-CE7) because
the sequence of these exons is highly conserved across
genes and, for CE1-CE3, at multiple locations within
genes. Several non-coding exons also have high sequence
similarity across genes and these are labeled UTR1-UTR20 (e.g. the sequence of UTR13 exons is highly con-
served across different genes). Exons that do not meet any
of the conditions described above are referred to as “exon ”
with a number denoting the exon position in the gene.
Measurement of DUF1220 by digital droplet PCR (ddPCR)
We performed ddPCR essentially as previously described
[17] to validate our copy number estimates for three rep-
resentative DUF1220 clades. DNA samples were obtained
from Coriell Biorepository and digested with the restric-
tion enzyme DDE1. Digested DNA, primers, and fluores-
cently labeled probes were then combined following the
manufacturer ’s protocol.


--------------- Source Node '2/2' ---------------
Node ID: '639d3b2a-ef68-4499-a4d5-f5b41c3145e0'
Similarity: '0.2743671969645746'
Metadata String:
`file_path: README.md
file_name: README.md
url: https://github.com/dpastling/plethora/blob/master/README.md`
Metadata Size: `106`
Content Size: `3660`
Retrieved Text:
#### 4. (Optional) Remove temporary files

```bash
bsub < code/1000genomes/4_batch_clean.sh
```

This script removes intermediate files from earlier stages of the pipeline. This is useful because WGS files can take up a lot of disk space. This script first confirms that files from previous steps have been run correctly before removing them. 

By default it assumes that the number of reads in the fastq file are
correct (verified via checksum or read counting). Optionally you can provide a
file with the expected number of reads. The script deletes the file from a
prior step if the file in the next step has the correct number of reads (e.g.
delete the original bam file if the sorted bam has the correct number of
reads and delete the sorted bam if the resulting bed file has the correct number
of reads).

If the data have been downloaded from a public repository like the 1000 Genomes, this script can remove the fastq files by passing an optional flag.

The script assumes the `.bam` file contains unaligned reads (e.g. the number of reads in the fastq file should match the number of reads in the .bam file).

Behind the scenes the clean script runs `code/clean_files.pl`. For more information on how to run this directly:

```bash
code/clean_files.pl -h
```


#### 5. Calculate coverage for each region of interest

```bash
bsub < code/1000genomes/5_make_bed.sh
```

This script: 

  - Coverts the .bam alignment file into bed format
  - Parses the reads
  - Calls the `merge_pairs.pl` script (described below) to combined proper pairs into a single
fragment
  - Finds overlaps with the reference bed file containing the regions of interest
(e.g. DUF1220)
  - Calculates the average coverage for each region: (number of bases that
overlap) / (domain length)


#### 6. (Optional) Remove temporary files

```bash
bsub < code/1000genomes/6_batch_clean.sh
```

This script is a link to the script above. At this stage it can remove the alignment and fastq files if present.


#### 7. Correct coverage for GC bias

```bash
bsub < code/1000genomes/7_batch_gc_correction.sh
```

This script performs the GC correction step using conserved regions that are
assumed to be found in diploid copy number. This script requires the `_read.depth.bed` file 
generated in step 5 above as well as a file with the percent GC content for each domain.

Behind the scenes, this shell script calls `code/gc_correction.R` which can be run manually like so:

```bash
code/gc_correction.R results/HG00250_read.depth.bed data/hg38_duf_full_domains_v2.3_GC.txt
```

## Other useful scripts

#### preprocessing\_1000genomes.R

This script is how we selected the ~300 samples from the full `sample.index`
file for the 1000 Genomes Project. It filters out the exome sequencing data,
selects samples with reasonably high coverage, etc. It tries to collect
representative samples from each of the populations.


#### gc\_from\_fasta.pl

This script calculates the percent GC content for a set of domains and is called
by the batch script above. Required are a set of domains in .bed file format and
a .fasta file for the genome reference


#### build\_gc\_model.sh

This an LSF script for submitting a specific version of the DUF1220 annotation
to the LSF queue.


#### merge\_pairs.pl

This is a helper script to `make_bed.sh` that combines proper pairs into a
single fragment, and separates discordant pairs into single end reads. The
lengths of the single end reads are extended by half the mean fragment size,
which is determined from the data itself. The extended length is sampled from a
normal distribution using the mean and standard deviation of the measured fragment sizes.

